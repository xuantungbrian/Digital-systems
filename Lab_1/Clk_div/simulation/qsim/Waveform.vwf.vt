// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/26/2023 17:49:56"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Clk_div
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Clk_div_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Reset;
reg [31:0] div_clk_count;
reg inclk;
// wires                                               
wire outclk;
wire outclk_Not;

// assign statements (if any)                          
Clk_div i1 (
// port map - connection between master ports and signals/registers   
	.Reset(Reset),
	.div_clk_count(div_clk_count),
	.inclk(inclk),
	.outclk(outclk),
	.outclk_Not(outclk_Not)
);
initial 
begin 
#1000000 $finish;
end 
// div_clk_count[ 31 ]
initial
begin
	div_clk_count[31] = 1'b0;
end 
// div_clk_count[ 30 ]
initial
begin
	div_clk_count[30] = 1'b0;
end 
// div_clk_count[ 29 ]
initial
begin
	div_clk_count[29] = 1'b0;
end 
// div_clk_count[ 28 ]
initial
begin
	div_clk_count[28] = 1'b0;
end 
// div_clk_count[ 27 ]
initial
begin
	div_clk_count[27] = 1'b0;
end 
// div_clk_count[ 26 ]
initial
begin
	div_clk_count[26] = 1'b0;
end 
// div_clk_count[ 25 ]
initial
begin
	div_clk_count[25] = 1'b0;
end 
// div_clk_count[ 24 ]
initial
begin
	div_clk_count[24] = 1'b0;
end 
// div_clk_count[ 23 ]
initial
begin
	div_clk_count[23] = 1'b0;
end 
// div_clk_count[ 22 ]
initial
begin
	div_clk_count[22] = 1'b0;
end 
// div_clk_count[ 21 ]
initial
begin
	div_clk_count[21] = 1'b0;
end 
// div_clk_count[ 20 ]
initial
begin
	div_clk_count[20] = 1'b0;
end 
// div_clk_count[ 19 ]
initial
begin
	div_clk_count[19] = 1'b0;
end 
// div_clk_count[ 18 ]
initial
begin
	div_clk_count[18] = 1'b0;
end 
// div_clk_count[ 17 ]
initial
begin
	div_clk_count[17] = 1'b0;
end 
// div_clk_count[ 16 ]
initial
begin
	div_clk_count[16] = 1'b0;
end 
// div_clk_count[ 15 ]
initial
begin
	div_clk_count[15] = 1'b0;
end 
// div_clk_count[ 14 ]
initial
begin
	div_clk_count[14] = 1'b0;
end 
// div_clk_count[ 13 ]
initial
begin
	div_clk_count[13] = 1'b0;
end 
// div_clk_count[ 12 ]
initial
begin
	div_clk_count[12] = 1'b0;
end 
// div_clk_count[ 11 ]
initial
begin
	div_clk_count[11] = 1'b0;
end 
// div_clk_count[ 10 ]
initial
begin
	div_clk_count[10] = 1'b0;
end 
// div_clk_count[ 9 ]
initial
begin
	div_clk_count[9] = 1'b0;
end 
// div_clk_count[ 8 ]
initial
begin
	div_clk_count[8] = 1'b0;
end 
// div_clk_count[ 7 ]
initial
begin
	div_clk_count[7] = 1'b0;
end 
// div_clk_count[ 6 ]
initial
begin
	div_clk_count[6] = 1'b0;
end 
// div_clk_count[ 5 ]
initial
begin
	div_clk_count[5] = 1'b0;
end 
// div_clk_count[ 4 ]
initial
begin
	div_clk_count[4] = 1'b0;
end 
// div_clk_count[ 3 ]
initial
begin
	div_clk_count[3] = 1'b1;
end 
// div_clk_count[ 2 ]
initial
begin
	div_clk_count[2] = 1'b0;
end 
// div_clk_count[ 1 ]
initial
begin
	div_clk_count[1] = 1'b1;
end 
// div_clk_count[ 0 ]
initial
begin
	div_clk_count[0] = 1'b0;
end 

// inclk
initial
begin
	inclk = 1'b0;
	inclk = #7083 1'b1;
	# 5000;
	repeat(98)
	begin
		inclk = 1'b0;
		inclk = #5000 1'b1;
		# 5000;
	end
	inclk = 1'b0;
	inclk = #5000 1'b1;
	inclk = #1875 1'b0;
end 
endmodule

